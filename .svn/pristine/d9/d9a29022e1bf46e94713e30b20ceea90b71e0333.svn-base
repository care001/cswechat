package com.jc.ext;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.ibatis.session.SqlSession;
import org.apache.log4j.Logger;
import org.easywechat.util.SendMessage;

import com.jc.mybatis.domain.Consume;
import com.jc.mybatis.domain.ConsumeExample;
import com.jc.mybatis.domain.User;
import com.jc.mybatis.mapper.ConsumeMapper;
import com.jc.util.Coder;
import com.jc.util.CookieUtil;
import com.jc.util.GetOpenId;
import com.jc.util.MyBatisUtil;
/**
 * 消费成功跳转页面
 * @author qianjia
 * 2016.6.5
 */
@WebServlet("/ConsumeSuc.ext")
public class ConsumeSuc extends HttpServlet{  
  
    private static final long serialVersionUID = 1L;  
    private static Logger logger = Logger.getLogger(ConsumeSuc.class);
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {  
    	request.setCharacterEncoding("UTF-8");  
        response.setCharacterEncoding("UTF-8");
        String openid =null;
        String code = request.getParameter("code");
        String state = request.getParameter("state");
        User user=CookieUtil.getUserByCookie(request);  
        double gold=0.0;
        double cash=0.0;
        double money = 0.0;
        HttpSession httpsession = request.getSession();
        String orderNo=(String)httpsession.getAttribute("orderNo");//session获取信息
        List<Consume> consumes = null;
        if(Coder.isStrNotEmpty(orderNo)){
        	SqlSession sqlSession = MyBatisUtil.getSession();
            ConsumeExample example=new ConsumeExample();
            ConsumeMapper consumeMapper = sqlSession.getMapper(ConsumeMapper.class);
            example.or().andOrdernoEqualTo(orderNo);
            consumes = consumeMapper.selectByExample(example);
        }       
        //获取订单信息
        if(Coder.isListNotEmpty(consumes)){
        	for (int i = 0; i < consumes.size(); i++) {
          		Consume consume=consumes.get(i);
          		if(consume.getWallettype().equals("7")){
          			gold=consume.getCssum();
          		}else{
          			cash=consume.getCssum();
          		}
          				
          	}
            Consume showConsume=consumes.get(0);
            money = new BigDecimal(gold).add(new BigDecimal(cash)).doubleValue();
            if (!"authdeny".equals(code)&&user!=null&&user.getUserid()>0&&state.equals(orderNo)) {//成功获取code&&是登陆的有效消费点账户&&链接里的orderNo==session里的orderNo--》发送收款信息
            	httpsession.setAttribute("orderNo", "");
                openid=GetOpenId.getOpenIdByCode(code);
                String business=user.getUsername();
                String content=business+"于 "+showConsume.getMaketime()+" 成功收款"+showConsume.getClientid()+"员工:"+money+"元(金诚币:"+gold+"元,现金:"+cash+"元)。" ;
                SendMessage.sendTextMessageToUser(content, openid);
            }else{     
                logger.info("就是不发提示消息，至于为什么，自己找原因。。。");  
            }   
        }
                 
        // 跳转到receiveMoney.jsp
        request.setAttribute("money", String.valueOf(money));
        response.sendRedirect("jsp/receiveMoney.jsp?money="+String.valueOf(money));
        //request.getRequestDispatcher("jsp/receiveMoney.jsp").forward(request, response);  
        }
    	public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {    
    		doGet(request, response); 
       
    	}
}
