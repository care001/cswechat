package com.jc.ext.oper;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.ibatis.session.SqlSession;

import cn.com.goldfinance.domain.wkxf.AccTransdetail;
import cn.com.goldfinance.mapper.wkxf.AccTransdetailMapper;
import cn.com.goldfinance.mapper.wkxf.EmpMapper;

import com.jc.mybatis.domain.Agency;
import com.jc.mybatis.domain.AgencyExample;
import com.jc.mybatis.domain.Config;
import com.jc.mybatis.domain.ConfigExample;
import com.jc.mybatis.domain.ConsumeExample;
import com.jc.mybatis.domain.LedgerData;
import com.jc.mybatis.domain.ConsumeExample.Criteria;
import com.jc.mybatis.mapper.AgencyMapper;
import com.jc.mybatis.mapper.ConLedgerMapper;
import com.jc.mybatis.mapper.ConfigMapper;
import com.jc.mybatis.mapper.MerchantMapper;
import com.jc.util.Coder;
import com.jc.util.ConfigByFile;
import com.jc.util.MyBatisUtil;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.BaseFont;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;

/**
 * 导出结算单
 * @author qianjia
 * 2016.9.18
 */
@WebServlet("/oper/AgencyBillPdf.ext")
public class AgencyBillPdf extends HttpServlet{
	
	private static final long serialVersionUID = 1L;
	private static Font headfont ;// 设置字体大小 
    private static Font keyfont;// 设置字体大小 
    static{ 
        BaseFont bfChinese;
        try { 
            
            bfChinese = BaseFont.createFont("STSong-Light","UniGB-UCS2-H",BaseFont.NOT_EMBEDDED); 
            headfont = new Font(bfChinese, 10, Font.BOLD);// 设置字体大小 
            keyfont = new Font(bfChinese, 11, Font.BOLD);// 设置字体大小 
        } catch (Exception e) {          
            e.printStackTrace(); 
        }  
    } 
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String agencyno=req.getParameter("agencyno");
		String month=req.getParameter("month");
		agencyno="JC0001";
		month="2016-09";
		System.out.println("-----------------------------"+ConfigByFile.agency_No);
		ByteArrayOutputStream stream = new ByteArrayOutputStream(); 
		Document document = new Document(PageSize.A4, 50, 50, 50, 50);
		try {
		PdfWriter writer = PdfWriter.getInstance(document, stream);
		
		//3.打开文档
		document.open();
		//4.向文档中添加内容
		//通过 com.lowagie.text.Paragraph 来添加文本。可以用文本及其默认的字体、颜色、大小等等设置来创建一个默认段落
		Paragraph pt=new Paragraph("结算单",headfont);//设置字体样式
		pt.setAlignment(1);//设置文字居中 0靠左   1，居中     2，靠右
		document.add(new Paragraph("\n"));
		PdfPTable table=null;
		if(agencyno!=null&&month!=null){
			table = createTable(agencyno,month);
		}
		table.setSpacingBefore(5);
		table.setSpacingAfter(5);
		document.add(table);

		document.add(new Paragraph("\n"));
		pt=new Paragraph(Coder.formatTime(new Date())+"\t\t\t\t\t\t"+"无卡消费系统",keyfont);
		pt.setAlignment(2);
		document.add(pt);
		//5.关闭文档
		document.close();
		writer.close();
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		//设置响应文档类型为pdf
		resp.setContentType("application/pdf");
		//设置响应数据大小
		resp.setContentLength(stream.size());
		//获取响应数据流
		ServletOutputStream out = resp.getOutputStream();
		//将pdf数据流写入响应数据流中
		stream.writeTo(out); 
		stream.close();
		out.flush();
		out.close();
		
	}
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		doPost(req, resp);
	}
	
	
	/**合并单元格setColspan()函数举例*/
	public static PdfPTable createTable(String agencyno,String month)throws DocumentException {
		Map<String, String> querymap=new HashMap<String, String>();
		Map<String, String> timemap=Coder.getLedgerTime(month);
		double all=0.0;
		String agencyname="";
		querymap.put("startTime", timemap.get("first"));
		querymap.put("endTime", timemap.get("last"));
		querymap.put("agencyno", agencyno);
		SqlSession session=MyBatisUtil.getSession();
		ConLedgerMapper mapper=session.getMapper(ConLedgerMapper.class);
		List<LedgerData> ledgerDatas=mapper.sumMerMoneyByAgencyNo(querymap);
		AgencyMapper agencyMapper=session.getMapper(AgencyMapper.class); 
		AgencyExample agencyExample=new AgencyExample();
		agencyExample.or().andAgencynoEqualTo(agencyno);
		agencyname=agencyMapper.selectByExample(agencyExample).get(0).getAgency();
		session.close();
		
	    PdfPTable table = new PdfPTable(new float[]{ 1, 3, 3, 7});
	    table.setWidthPercentage(85f);
	    table.getDefaultCell().setMinimumHeight(80);
	    PdfPCell cell;
	    cell = new PdfPCell(new Phrase("发行主体结算单（"+month+"）",keyfont));
	    cell.setColspan(4);
	    cell.setUseAscender(true);
	    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	    cell.setMinimumHeight(30);
	    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(cell);//添加标题
	    
	    cell = new PdfPCell(new Phrase("发行主体公司",keyfont));
	    cell.setColspan(2);
	    cell.setUseAscender(true);
	    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	    cell.setMinimumHeight(30);
	    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(cell);
	    cell = new PdfPCell(new Phrase("金观诚财富",keyfont));
	    cell.setColspan(2);
	    cell.setUseAscender(true);
	    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	    cell.setMinimumHeight(30);
	    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(cell);
	    
	    cell = new PdfPCell(new Phrase("结算时间",keyfont));
	    cell.setColspan(2);
	    cell.setUseAscender(true);
	    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	    cell.setMinimumHeight(30);
	    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(cell);
	    cell = new PdfPCell(new Phrase(timemap.get("first")+"——"+timemap.get("last"),keyfont));
	    cell.setColspan(2);
	    cell.setUseAscender(true);
	    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	    cell.setMinimumHeight(30);
	    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(cell);
	    
	    cell = new PdfPCell(new Phrase("序号",keyfont));
	    cell.setUseAscender(true);
	    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	    cell.setMinimumHeight(30);
	    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(cell);
	    cell = new PdfPCell(new Phrase("所属商户",keyfont));
	    cell.setUseAscender(true);
	    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	    cell.setMinimumHeight(30);
	    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(cell);
	    cell = new PdfPCell(new Phrase("结算主体",keyfont));
	    cell.setUseAscender(true);
	    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	    cell.setMinimumHeight(30);
	    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(cell);
	    cell = new PdfPCell(new Phrase("金额（金诚币，元）",keyfont));
	    cell.setUseAscender(true);
	    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	    cell.setMinimumHeight(30);
	    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(cell);
	    if(agencyno.equals(ConfigByFile.agency_No)){
	    	ledgerDatas=createXJData(ledgerDatas, timemap.get("first"), timemap.get("last"));
	    }
	   if(Coder.isListNotEmpty(ledgerDatas)){
		   for (int i = 0; i < ledgerDatas.size(); i++) {
		    	LedgerData ledgerData=ledgerDatas.get(i);
		    	cell = new PdfPCell(new Phrase(String.valueOf(i+1),keyfont));
			    
			    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			    table.addCell(cell);
			    cell = new PdfPCell(new Phrase(ledgerData.getMername(),keyfont));
			    
			    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			    table.addCell(cell);
			    cell = new PdfPCell(new Phrase(ledgerData.getAgencyname(),keyfont));
			    
			    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			    table.addCell(cell);
			    cell = new PdfPCell(new Phrase(String.valueOf(ledgerData.getMoney()),keyfont));
			    
			    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			    table.addCell(cell);
			    all=new BigDecimal(all).add(new BigDecimal(ledgerData.getMoney())).doubleValue();
			}
	   }
	    

	    cell = new PdfPCell(new Phrase("应收账款（合计）",keyfont));
	    cell.setColspan(3);
	    cell.setUseAscender(true);
	    cell.setVerticalAlignment(Element.ALIGN_MIDDLE); 
	    cell.setMinimumHeight(30);
	    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(cell);
	    cell = new PdfPCell(new Phrase(String.valueOf(all),keyfont));
	    cell.setColspan(1);
	    cell.setUseAscender(true);
	    cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
	    cell.setMinimumHeight(30);
	    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(cell);
	    
	    cell = new PdfPCell(new Phrase("\n\t金诚互联网金融：\n\n\n\n\t\t\t\t\t\t\t\t经办人签字：\n\t\t\t\t\t\t\t\t\t（盖公章）",keyfont));
	    cell.setColspan(3);
	    cell.setMinimumHeight(120);
	    cell.setHorizontalAlignment(Element.ALIGN_LEFT);
	    table.addCell(cell);
	    cell = new PdfPCell(new Phrase("\n\t"+agencyname+":\n\n\n\n\t\t\t\t\t\t\t经办人签字：\n\t\t\t\t\t\t\t\t（盖公章）",keyfont));
	    cell.setColspan(1);
	    cell.setMinimumHeight(120);
	    cell.setHorizontalAlignment(Element.ALIGN_LEFT);
	    table.addCell(cell);
	    
	    return table;
	}
	
	/**融合C3 有卡消费 生成新的结算单数据 JC0000(互联网金融 现金才需要调用)*/
	public static List<LedgerData> createXJData(List<LedgerData> ledgerDatas,String startTime, String endTime) {
		List<AccTransdetail> accTransdetails=new ArrayList<AccTransdetail>();
		List<LedgerData> reslutList = new ArrayList<LedgerData>();
		Map<String, Object> map=new HashMap<String, Object>();
		SqlSession wkxfSession = MyBatisUtil.getwkxfSession();
		AccTransdetailMapper accTransdetailMapper = wkxfSession.getMapper(AccTransdetailMapper.class);
		map.put("startTime", startTime);
		map.put("endTime", endTime);
		accTransdetails=accTransdetailMapper.getFXZTByMap(map);
		wkxfSession.close();
		SqlSession session = MyBatisUtil.getSession();
		ConfigMapper configMapper = session.getMapper(ConfigMapper.class);
		ConfigExample example=new ConfigExample();
		MerchantMapper merchantMapper = session.getMapper(MerchantMapper.class);
		AgencyMapper agencyMapper = session.getMapper(AgencyMapper.class);
		AgencyExample agencyExample = new AgencyExample();
		agencyExample.or().andAgencynoEqualTo(ConfigByFile.agency_No);
		//确保JC0000 在发行主体里 
		List<Agency> agencies = agencyMapper.selectByExample(agencyExample);
		String agencyName = "未知现金发行主体";
		if(Coder.isListNotEmpty(agencies)){
			agencyName = agencies.get(0).getAgency();
		}
		
		//把有卡消费的记录统计按配置表中对应合并到无卡记录上
		if(Coder.isListNotEmpty(accTransdetails)&&Coder.isListNotEmpty(ledgerDatas)){
			for (int i = 0; i < ledgerDatas.size(); i++) {
				LedgerData ledgerData=ledgerDatas.get(i);
				for(int t = 0; t<accTransdetails.size(); t++){
					AccTransdetail accTransdetail = accTransdetails.get(t);
					example.clear();
					example.or().andNameEqualTo(accTransdetail.getDevId());
					List<Config> configs=configMapper.selectByExample(example);
					String merId = "-1";
					if(Coder.isListNotEmpty(configs)){
						merId = configs.get(0).getReserves();
					}
					if(ledgerData.getMerid().equals(merId)){
						accTransdetails.remove(t);
						ledgerData.setMoney(new BigDecimal(accTransdetail.getOmoneyvalue()).add(new BigDecimal(ledgerData.getMoney())).doubleValue());
					}
				}
				reslutList.add(ledgerData);
			}
		}
		//无卡 无消费商户 有卡消费 生成相应统计数据
		if(Coder.isListNotEmpty(accTransdetails)){
			for (int i = 0; i < accTransdetails.size(); i++) {
				LedgerData ledgerData = new LedgerData();
				AccTransdetail accTransdetail = accTransdetails.get(i);
				example.clear();
				example.or().andNameEqualTo(accTransdetail.getDevId());
				List<Config> configs=configMapper.selectByExample(example);
				//有卡消费机号在配置文件中配置 能找到匹配的商户
				if(Coder.isListNotEmpty(configs)){
					String merId = configs.get(0).getReserves();
					String mername = merchantMapper.selectByPrimaryKey(Integer.parseInt(merId)).getMername();
					ledgerData.setAgencyname(agencyName);
					ledgerData.setAgencyno(ConfigByFile.agency_No);
					ledgerData.setMerid(merId);
					ledgerData.setMername(mername);
					ledgerData.setMoney(Double.valueOf(accTransdetail.getOmoneyvalue()));
					reslutList.add(ledgerData);
				}	
					
			}
		}
		session.close();
		return reslutList;
		
	}

	
		
}
